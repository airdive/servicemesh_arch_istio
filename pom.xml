<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>pom</packaging>
    <modules>
        <module>bookstore-servicemesh-domain-frontend</module>
        <module>bookstore-servicemesh-domain-authentication</module>
        <module>bookstore-servicemesh-domain-payment</module>
        <module>bookstore-servicemesh-domain-account</module>
        <module>bookstore-servicemesh-domain-warehouse</module>
        <module>bookstore-servicemesh-library-infrastructure</module>
        <module>bookstore-servicemesh-library-testing</module>
    </modules>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.github.fenixsoft</groupId>
    <artifactId>bookstore-servicemesh-istio</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>bookstore-servicemesh-istio</name>
    <description>Service Mesh Architecture Demonstrate with Istio Infrastructure</description>

    <properties>
        <java.version>1.8</java.version>
        <argLine>-Dfile.encoding=UTF-8</argLine>
        <revision>1.0.0-SNAPSHOT</revision>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.2</version>
                <configuration>
                    <useSystemClassLoader>false</useSystemClassLoader>
                </configuration>
            </plugin>
            <!--
                  1.自Maven 3.5.0-beta-1 开始，可以使用 ${revision}, ${sha1} and/or ${changelist} 这样的变量作为版本占位符
                  2.但是在install或者deploy是无法识别的，就需要这个插件：发现使用插件之后，发现它是把这个新的pom打到jar包里。也就是说，
                    这个插件的作用就是在install或者deploy的时候，生成一个新的替换占位符的pom文件，也就是帮你替换了这些变量，接着把新的pom文件打入到jar包里。
                   -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <version>1.1.0</version>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <distributionManagement>
        <repository>
            <!--和maven/settings.xml中server中的id一致，表示使用该id对应的用户名和密码-->
            <id>maven-release</id>
            <!--如果jar的版本是release版本，那么就上传到这个仓库，根据自己情况修改-->
            <url>http://10.28.25.211:8081/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <!--和maven/settings.xml中server中的id一致，表示使用该id对应的用户名和密码-->
            <id>maven-snapshot</id>
            <!--如果jar的版本是snapshot版本，那么就上传到这个仓库，根据自己情况修改-->
            <url>http://10.28.25.211:8081/repository/maven-snapshot/</url>
        </snapshotRepository>
    </distributionManagement>

</project>
